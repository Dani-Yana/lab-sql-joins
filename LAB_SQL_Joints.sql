use sakila;

-- Write SQL queries to perform the following tas ks using the Sakila databas e:
-- 1. List the number of films per category.
select category_id, COUNT(*) as  film_count
from film_category
group by category_id;

-- 2. Retrieve the store ID, city, and country for each store.
select store.store_id, city.city, country.country from sakila.address
join sakila.store 
on address.address_id = store.address_id
join sakila.city
on address.city_id = city.city_id
join sakila.country
on city.country_id = country.country_id
group by store.store_id;

-- 3. Calculate the total revenue generated by each store in dollars.
select distinct store.store_id, SUM(payment.amount) as  total_payment
from store
join staff on store.store_id = staff.store_id
join payment on payment.staff_id = staff.staff_id
group by store.store_id;

-- 4. Determine the average running time of films for each category.
select category.name, avg(film.length) as  'average running time' from sakila.film_category
join sakila.film
on film_category.film_id = film.film_id
join sakila.category
on film_category.category_id = category.category_id
group by category.category_id;

-- 5. Identify the film categories with the longest average running time.
select category.name, avg(film.length) as  avg_running_time
from film
join film_category on film.film_id = film_category.film_id
join category on film_category.category_id = category.category_id
group by category.name
order by avg_running_time desc;

-- 6. Display the top 10 most frequently rented movies in descending order.
select film.film_id, film.title, COUNT(rental.rental_id) as  rental_count
from film
join inventory on film.film_id = inventory.film_id
join rental on inventory.inventory_id = rental.inventory_id
group by film.film_id, film.title
order by rental_count desc
limit 10;
